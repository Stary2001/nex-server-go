package protocols
// This file is autogenerated.
// I apologise in advance.
import (
	NEX "github.com/Stary2001/nex-go"
	)
func Account_Management_CreateAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrKey := string(stream.String())
    UiGroups := stream.UInt32LE()
    StrEmail := string(stream.String())
    rmcResult, returnValue := Account_Management_CreateAccount(StrPrincipalName,StrKey,UiGroups,StrEmail)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_DeleteAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult := Account_Management_DeleteAccount(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_DisableAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    DtUntil := NEX.DateTime(stream.UInt64LE())
    StrMessage := string(stream.String())
    rmcResult, returnValue := Account_Management_DisableAccount(IdPrincipal,DtUntil,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_ChangePassword_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrNewKey := string(stream.String())
    rmcResult, returnValue := Account_Management_ChangePassword(StrNewKey)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_TestCapability_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiCapability := stream.UInt32LE()
    rmcResult, returnValue := Account_Management_TestCapability(UiCapability)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult, StrName := Account_Management_GetName(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.String(string(StrName))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetAccountData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, returnValue,OAccountData := Account_Management_GetAccountData()
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(returnValue)
    responseStream.Struct(OAccountData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetPrivateData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, returnValue,OData := Account_Management_GetPrivateData()
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.Struct(OData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetPublicData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult, returnValue,OData := Account_Management_GetPublicData(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.Struct(OData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetMultiplePublicData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstPrincipals := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult, returnValue,OData := Account_Management_GetMultiplePublicData(LstPrincipals)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, OData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateAccountName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrName := string(stream.String())
    rmcResult, returnValue := Account_Management_UpdateAccountName(StrName)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateAccountEmail_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrName := string(stream.String())
    rmcResult, returnValue := Account_Management_UpdateAccountEmail(StrName)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateCustomData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OPublicData := stream.Struct("Data").(NEX.Data)
    OPrivateData := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue := Account_Management_UpdateCustomData(OPublicData,OPrivateData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_FindByNameRegex_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroups := stream.UInt32LE()
    StrRegex := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, PlstAccounts := Account_Management_FindByNameRegex(UiGroups,StrRegex,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.BasicAccountInfo) { innerStream.Struct(data) }, PlstAccounts)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateAccountExpiryDate_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    DtExpiry := NEX.DateTime(stream.UInt64LE())
    StrExpiredMessage := string(stream.String())
    rmcResult := Account_Management_UpdateAccountExpiryDate(IdPrincipal,DtExpiry,StrExpiredMessage)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateAccountEffectiveDate_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    DtEffectiveFrom := NEX.DateTime(stream.UInt64LE())
    StrNotEffectiveMessage := string(stream.String())
    rmcResult := Account_Management_UpdateAccountEffectiveDate(IdPrincipal,DtEffectiveFrom,StrNotEffectiveMessage)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateStatus_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrStatus := string(stream.String())
    rmcResult := Account_Management_UpdateStatus(StrStatus)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetStatus_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult, StrStatus := Account_Management_GetStatus(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.String(string(StrStatus))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_GetLastConnectionStats_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult, DtLastSessionLogin,DtLastSessionLogout,DtCurrentSessionLogin := Account_Management_GetLastConnectionStats(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(uint64(DtLastSessionLogin))
    responseStream.UInt64LE(uint64(DtLastSessionLogout))
    responseStream.UInt64LE(uint64(DtCurrentSessionLogin))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_ResetPassword_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, returnValue := Account_Management_ResetPassword()
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_CreateAccountWithCustomData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrKey := string(stream.String())
    UiGroups := stream.UInt32LE()
    StrEmail := string(stream.String())
    OPublicData := stream.Struct("Data").(NEX.Data)
    OPrivateData := stream.Struct("Data").(NEX.Data)
    rmcResult := Account_Management_CreateAccountWithCustomData(StrPrincipalName,StrKey,UiGroups,StrEmail,OPublicData,OPrivateData)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_RetrieveAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, OAccountData,OPublicData,OPrivateData := Account_Management_RetrieveAccount()
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(OAccountData)
    responseStream.Struct(OPublicData)
    responseStream.Struct(OPrivateData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_UpdateAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrKey := string(stream.String())
    StrEmail := string(stream.String())
    OPublicData := stream.Struct("Data").(NEX.Data)
    OPrivateData := stream.Struct("Data").(NEX.Data)
    rmcResult := Account_Management_UpdateAccount(StrKey,StrEmail,OPublicData,OPrivateData)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_ChangePasswordByGuest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrEmail := string(stream.String())
    StrKey := string(stream.String())
    rmcResult := Account_Management_ChangePasswordByGuest(StrPrincipalName,StrEmail,StrKey)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_FindByNameLike_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroups := stream.UInt32LE()
    StrLike := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, PlstAccounts := Account_Management_FindByNameLike(UiGroups,StrLike,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.BasicAccountInfo) { innerStream.Struct(data) }, PlstAccounts)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_CustomCreateAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrKey := string(stream.String())
    UiGroups := stream.UInt32LE()
    StrEmail := string(stream.String())
    OAuthData := stream.Struct("Data").(NEX.Data)
    rmcResult, Pid := Account_Management_CustomCreateAccount(StrPrincipalName,StrKey,UiGroups,StrEmail,OAuthData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(Pid))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_NintendoCreateAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrKey := string(stream.String())
    UiGroups := stream.UInt32LE()
    StrEmail := string(stream.String())
    OAuthData := stream.Struct("Data").(NEX.Data)
    rmcResult, Pid,PidHMAC := Account_Management_NintendoCreateAccount(StrPrincipalName,StrKey,UiGroups,StrEmail,OAuthData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(Pid))
    responseStream.String(string(PidHMAC))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_LookupOrCreateAccount_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPrincipalName := string(stream.String())
    StrKey := string(stream.String())
    UiGroups := stream.UInt32LE()
    StrEmail := string(stream.String())
    OAuthData := stream.Struct("Data").(NEX.Data)
    rmcResult, Pid := Account_Management_LookupOrCreateAccount(StrPrincipalName,StrKey,UiGroups,StrEmail,OAuthData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(Pid))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_DisconnectPrincipal_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdPrincipal := NEX.PID(stream.UInt32LE())
    rmcResult, returnValue := Account_Management_DisconnectPrincipal(IdPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Account_Management_DisconnectAllPrincipals_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, returnValue := Account_Management_DisconnectAllPrincipals()
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_Login_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrUserName := string(stream.String())
    rmcResult, returnValue,PidPrincipal,PbufResponse,PConnectionData,StrReturnMsg := Authentication_Login(StrUserName)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(uint32(PidPrincipal))
    responseStream.Buffer(PbufResponse)
    responseStream.Struct(PConnectionData)
    responseStream.String(string(StrReturnMsg))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_LoginEx_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrUserName := string(stream.String())
    OExtraData := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue,PidPrincipal,PbufResponse,PConnectionData,StrReturnMsg,PSourceKey := Authentication_LoginEx(StrUserName,OExtraData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(uint32(PidPrincipal))
    responseStream.Buffer(PbufResponse)
    responseStream.Struct(PConnectionData)
    responseStream.String(string(StrReturnMsg))
    responseStream.String(string(PSourceKey))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_RequestTicket_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdSource := NEX.PID(stream.UInt32LE())
    IdTarget := NEX.PID(stream.UInt32LE())
    rmcResult, returnValue,BufResponse := Authentication_RequestTicket(IdSource,IdTarget)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.Buffer(BufResponse)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_GetPID_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrUserName := string(stream.String())
    rmcResult, returnValue := Authentication_GetPID(StrUserName)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_GetName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := NEX.PID(stream.UInt32LE())
    rmcResult, returnValue := Authentication_GetName(Id)
    responseStream := NEX.NewOutputStream()
    responseStream.String(string(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Authentication_LoginWithContext_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LoginData := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue,PidPrincipal,PbufResponse,PConnectionData := Authentication_LoginWithContext(LoginData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(uint32(PidPrincipal))
    responseStream.Buffer(PbufResponse)
    responseStream.Struct(PConnectionData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PrepareGetObjectV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePrepareGetParamV1").(NEX.DataStorePrepareGetParamV1)
    rmcResult, PReqGetInfo := Data_Store_PrepareGetObjectV1(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqGetInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PreparePostObjectV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePreparePostParamV1").(NEX.DataStorePreparePostParamV1)
    rmcResult, PReqPostInfo := Data_Store_PreparePostObjectV1(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqPostInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_CompletePostObjectV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreCompletePostParamV1").(NEX.DataStoreCompletePostParamV1)
    rmcResult := Data_Store_CompletePostObjectV1(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_DeleteObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreDeleteParam").(NEX.DataStoreDeleteParam)
    rmcResult := Data_Store_DeleteObject(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_DeleteObjects_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Params := stream.List("DataStoreDeleteParam", func (innerStream *NEX.InputStream) NEX.DataStoreDeleteParam { return innerStream.Struct("DataStoreDeleteParam").(NEX.DataStoreDeleteParam) }).([]NEX.DataStoreDeleteParam)
    Transactional := stream.Bool()
    rmcResult, PResults := Data_Store_DeleteObjects(Params,Transactional)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ChangeMetaV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreChangeMetaParamV1").(NEX.DataStoreChangeMetaParamV1)
    rmcResult := Data_Store_ChangeMetaV1(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ChangeMetasV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    Params := stream.List("DataStoreChangeMetaParamV1", func (innerStream *NEX.InputStream) NEX.DataStoreChangeMetaParamV1 { return innerStream.Struct("DataStoreChangeMetaParamV1").(NEX.DataStoreChangeMetaParamV1) }).([]NEX.DataStoreChangeMetaParamV1)
    Transactional := stream.Bool()
    rmcResult, PResults := Data_Store_ChangeMetasV1(DataIds,Params,Transactional)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetMeta_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetMetaParam").(NEX.DataStoreGetMetaParam)
    rmcResult, PMetaInfo := Data_Store_GetMeta(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PMetaInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetMetas_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    Param := stream.Struct("DataStoreGetMetaParam").(NEX.DataStoreGetMetaParam)
    rmcResult, PMetaInfo,PResults := Data_Store_GetMetas(DataIds,Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreMetaInfo) { innerStream.Struct(data) }, PMetaInfo)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PrepareUpdateObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePrepareUpdateParam").(NEX.DataStorePrepareUpdateParam)
    rmcResult, PReqUpdateInfo := Data_Store_PrepareUpdateObject(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqUpdateInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_CompleteUpdateObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreCompleteUpdateParam").(NEX.DataStoreCompleteUpdateParam)
    rmcResult := Data_Store_CompleteUpdateObject(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_SearchObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreSearchParam").(NEX.DataStoreSearchParam)
    rmcResult, PSearchResult := Data_Store_SearchObject(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PSearchResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetNotificationUrl_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetNotificationUrlParam").(NEX.DataStoreGetNotificationUrlParam)
    rmcResult, Info := Data_Store_GetNotificationUrl(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(Info)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetNewArrivedNotificationsV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetNewArrivedNotificationsParam").(NEX.DataStoreGetNewArrivedNotificationsParam)
    rmcResult, PResult,PHasNext := Data_Store_GetNewArrivedNotificationsV1(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreNotificationV1) { innerStream.Struct(data) }, PResult)
    responseStream.Bool(PHasNext)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_RateObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := stream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget)
    Param := stream.Struct("DataStoreRateObjectParam").(NEX.DataStoreRateObjectParam)
    FetchRatings := stream.Bool()
    rmcResult, PRating := Data_Store_RateObject(Target,Param,FetchRatings)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PRating)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetRating_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := stream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget)
    AccessPassword := stream.UInt64LE()
    rmcResult, PRating := Data_Store_GetRating(Target,AccessPassword)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PRating)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetRatings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    AccessPassword := stream.UInt64LE()
    rmcResult, PRatings,PResults := Data_Store_GetRatings(DataIds,AccessPassword)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data []NEX.DataStoreRatingInfoWithSlot) { innerStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreRatingInfoWithSlot) { innerStream.Struct(data) }, data) }, PRatings)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ResetRating_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := stream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget)
    UpdatePassword := stream.UInt64LE()
    rmcResult := Data_Store_ResetRating(Target,UpdatePassword)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ResetRatings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    Transactional := stream.Bool()
    rmcResult, PResults := Data_Store_ResetRatings(DataIds,Transactional)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetSpecificMetaV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetSpecificMetaParamV1").(NEX.DataStoreGetSpecificMetaParamV1)
    rmcResult, PMetaInfos := Data_Store_GetSpecificMetaV1(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreSpecificMetaInfoV1) { innerStream.Struct(data) }, PMetaInfos)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PostMetaBinary_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam)
    rmcResult, DataId := Data_Store_PostMetaBinary(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(DataId)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_TouchObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreTouchObjectParam").(NEX.DataStoreTouchObjectParam)
    rmcResult := Data_Store_TouchObject(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetRatingWithLog_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := stream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget)
    AccessPassword := stream.UInt64LE()
    rmcResult, PRating,PRatingLog := Data_Store_GetRatingWithLog(Target,AccessPassword)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PRating)
    responseStream.Struct(PRatingLog)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PreparePostObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam)
    rmcResult, PReqPostInfo := Data_Store_PreparePostObject(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqPostInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PrepareGetObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePrepareGetParam").(NEX.DataStorePrepareGetParam)
    rmcResult, PReqGetInfo := Data_Store_PrepareGetObject(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqGetInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_CompletePostObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreCompletePostParam").(NEX.DataStoreCompletePostParam)
    rmcResult := Data_Store_CompletePostObject(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetNewArrivedNotifications_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetNewArrivedNotificationsParam").(NEX.DataStoreGetNewArrivedNotificationsParam)
    rmcResult, PResult,PHasNext := Data_Store_GetNewArrivedNotifications(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreNotification) { innerStream.Struct(data) }, PResult)
    responseStream.Bool(PHasNext)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetSpecificMeta_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreGetSpecificMetaParam").(NEX.DataStoreGetSpecificMetaParam)
    rmcResult, PMetaInfos := Data_Store_GetSpecificMeta(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreSpecificMetaInfo) { innerStream.Struct(data) }, PMetaInfos)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetPersistenceInfo_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OwnerId := stream.UInt64LE()
    PersistenceSlotId := stream.UInt16LE()
    rmcResult, PPersistenceInfo := Data_Store_GetPersistenceInfo(OwnerId,PersistenceSlotId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PPersistenceInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetPersistenceInfos_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OwnerId := stream.UInt64LE()
    PersistenceSlotIds := stream.List("Uint16", func (innerStream *NEX.InputStream) uint16 { return innerStream.UInt16LE() }).([]uint16)
    rmcResult, PPersistenceInfo,PResults := Data_Store_GetPersistenceInfos(OwnerId,PersistenceSlotIds)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStorePersistenceInfo) { innerStream.Struct(data) }, PPersistenceInfo)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PerpetuateObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PersistenceSlotId := stream.UInt16LE()
    DataId := stream.UInt64LE()
    DeleteLastObject := stream.Bool()
    rmcResult := Data_Store_PerpetuateObject(PersistenceSlotId,DataId,DeleteLastObject)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_UnperpetuateObject_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PersistenceSlotId := stream.UInt16LE()
    DeleteLastObject := stream.Bool()
    rmcResult := Data_Store_UnperpetuateObject(PersistenceSlotId,DeleteLastObject)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PrepareGetObjectOrMetaBinary_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStorePrepareGetParam").(NEX.DataStorePrepareGetParam)
    rmcResult, PReqGetInfo,PReqGetAdditionalMeta := Data_Store_PrepareGetObjectOrMetaBinary(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PReqGetInfo)
    responseStream.Struct(PReqGetAdditionalMeta)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetPasswordInfo_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataId := stream.UInt64LE()
    rmcResult, PPasswordInfo := Data_Store_GetPasswordInfo(DataId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PPasswordInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetPasswordInfos_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    rmcResult, PPasswordInfos,PResults := Data_Store_GetPasswordInfos(DataIds)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStorePasswordInfo) { innerStream.Struct(data) }, PPasswordInfos)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetMetasMultipleParam_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Params := stream.List("DataStoreGetMetaParam", func (innerStream *NEX.InputStream) NEX.DataStoreGetMetaParam { return innerStream.Struct("DataStoreGetMetaParam").(NEX.DataStoreGetMetaParam) }).([]NEX.DataStoreGetMetaParam)
    rmcResult, PMetaInfo,PResults := Data_Store_GetMetasMultipleParam(Params)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreMetaInfo) { innerStream.Struct(data) }, PMetaInfo)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_CompletePostObjects_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    rmcResult := Data_Store_CompletePostObjects(DataIds)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ChangeMeta_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreChangeMetaParam").(NEX.DataStoreChangeMetaParam)
    rmcResult := Data_Store_ChangeMeta(Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ChangeMetas_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    Params := stream.List("DataStoreChangeMetaParam", func (innerStream *NEX.InputStream) NEX.DataStoreChangeMetaParam { return innerStream.Struct("DataStoreChangeMetaParam").(NEX.DataStoreChangeMetaParam) }).([]NEX.DataStoreChangeMetaParam)
    Transactional := stream.Bool()
    rmcResult, PResults := Data_Store_ChangeMetas(DataIds,Params,Transactional)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_RateObjects_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Targets := stream.List("DataStoreRatingTarget", func (innerStream *NEX.InputStream) NEX.DataStoreRatingTarget { return innerStream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget) }).([]NEX.DataStoreRatingTarget)
    Params := stream.List("DataStoreRateObjectParam", func (innerStream *NEX.InputStream) NEX.DataStoreRateObjectParam { return innerStream.Struct("DataStoreRateObjectParam").(NEX.DataStoreRateObjectParam) }).([]NEX.DataStoreRateObjectParam)
    Transactional := stream.Bool()
    FetchRatings := stream.Bool()
    rmcResult, PRatings,PResults := Data_Store_RateObjects(Targets,Params,Transactional,FetchRatings)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreRatingInfo) { innerStream.Struct(data) }, PRatings)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PostMetaBinaryWithDataId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataId := stream.UInt64LE()
    Param := stream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam)
    rmcResult := Data_Store_PostMetaBinaryWithDataId(DataId,Param)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_PostMetaBinariesWithDataId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    Params := stream.List("DataStorePreparePostParam", func (innerStream *NEX.InputStream) NEX.DataStorePreparePostParam { return innerStream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam) }).([]NEX.DataStorePreparePostParam)
    Transactional := stream.Bool()
    rmcResult, PResults := Data_Store_PostMetaBinariesWithDataId(DataIds,Params,Transactional)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_RateObjectWithPosting_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := stream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget)
    RateParam := stream.Struct("DataStoreRateObjectParam").(NEX.DataStoreRateObjectParam)
    PostParam := stream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam)
    FetchRatings := stream.Bool()
    rmcResult, PRating := Data_Store_RateObjectWithPosting(Target,RateParam,PostParam,FetchRatings)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PRating)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_RateObjectsWithPosting_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Targets := stream.List("DataStoreRatingTarget", func (innerStream *NEX.InputStream) NEX.DataStoreRatingTarget { return innerStream.Struct("DataStoreRatingTarget").(NEX.DataStoreRatingTarget) }).([]NEX.DataStoreRatingTarget)
    RateParams := stream.List("DataStoreRateObjectParam", func (innerStream *NEX.InputStream) NEX.DataStoreRateObjectParam { return innerStream.Struct("DataStoreRateObjectParam").(NEX.DataStoreRateObjectParam) }).([]NEX.DataStoreRateObjectParam)
    PostParams := stream.List("DataStorePreparePostParam", func (innerStream *NEX.InputStream) NEX.DataStorePreparePostParam { return innerStream.Struct("DataStorePreparePostParam").(NEX.DataStorePreparePostParam) }).([]NEX.DataStorePreparePostParam)
    Transactional := stream.Bool()
    FetchRatings := stream.Bool()
    rmcResult, PRatings,PResults := Data_Store_RateObjectsWithPosting(Targets,RateParams,PostParams,Transactional,FetchRatings)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreRatingInfo) { innerStream.Struct(data) }, PRatings)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetObjectInfos_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    DataIds := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    rmcResult, PInfos,PResults := Data_Store_GetObjectInfos(DataIds)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreReqGetInfo) { innerStream.Struct(data) }, PInfos)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_SearchObjectLight_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreSearchParam").(NEX.DataStoreSearchParam)
    rmcResult, PSearchResult := Data_Store_SearchObjectLight(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PSearchResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_AddToBufferQueue_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("BufferQueueParam").(NEX.BufferQueueParam)
    Buffer := stream.Buffer()
    rmcResult := Data_Store_AddToBufferQueue(Param,Buffer)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_AddToBufferQueues_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Params := stream.List("BufferQueueParam", func (innerStream *NEX.InputStream) NEX.BufferQueueParam { return innerStream.Struct("BufferQueueParam").(NEX.BufferQueueParam) }).([]NEX.BufferQueueParam)
    Buffers := stream.List("NEX.QBuffer", func (innerStream *NEX.InputStream) NEX.QBuffer { return innerStream.Buffer() }).([]NEX.QBuffer)
    rmcResult, PResults := Data_Store_AddToBufferQueues(Params,Buffers)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetBufferQueue_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("BufferQueueParam").(NEX.BufferQueueParam)
    rmcResult, PBufferQueue := Data_Store_GetBufferQueue(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.QBuffer) { innerStream.Buffer(data) }, PBufferQueue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_GetBufferQueues_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Params := stream.List("BufferQueueParam", func (innerStream *NEX.InputStream) NEX.BufferQueueParam { return innerStream.Struct("BufferQueueParam").(NEX.BufferQueueParam) }).([]NEX.BufferQueueParam)
    rmcResult, PBufferQueueLst,PResults := Data_Store_GetBufferQueues(Params)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data []NEX.QBuffer) { innerStream.List(func (innerStream *NEX.OutputStream, data NEX.QBuffer) { innerStream.Buffer(data) }, data) }, PBufferQueueLst)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_ClearBufferQueues_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Params := stream.List("BufferQueueParam", func (innerStream *NEX.InputStream) NEX.BufferQueueParam { return innerStream.Struct("BufferQueueParam").(NEX.BufferQueueParam) }).([]NEX.BufferQueueParam)
    rmcResult, PResults := Data_Store_ClearBufferQueues(Params)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Result) { innerStream.UInt32LE(uint32(data)) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_SearchBalloon_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("DataStoreSearchBalloonParam").(NEX.DataStoreSearchBalloonParam)
    rmcResult, PResults := Data_Store_SearchBalloon(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DataStoreSearchBalloonResultSet) { innerStream.Struct(data) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Data_Store_FetchMyInfos_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Patam := stream.Struct("DataStoreFetchMyInfosParam").(NEX.DataStoreFetchMyInfosParam)
    rmcResult, PResult := Data_Store_FetchMyInfos(Patam)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_AddFriend_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    UiDetails := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Friends_AddFriend(UiPlayer,UiDetails,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_AddFriendByName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPlayerName := string(stream.String())
    UiDetails := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Friends_AddFriendByName(StrPlayerName,UiDetails,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_AddFriendWithDetails_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    UiDetails := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, RelationshipData := Friends_AddFriendWithDetails(UiPlayer,UiDetails,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(RelationshipData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_AddFriendByNameWithDetails_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    UiDetails := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, RelationshipData := Friends_AddFriendByNameWithDetails(UiPlayer,UiDetails,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(RelationshipData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_AcceptFriendship_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    rmcResult, returnValue := Friends_AcceptFriendship(UiPlayer)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_DeclineFriendship_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    rmcResult, returnValue := Friends_DeclineFriendship(UiPlayer)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_BlackList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    UiDetails := stream.UInt32LE()
    rmcResult, returnValue := Friends_BlackList(UiPlayer,UiDetails)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_BlackListByName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrPlayerName := string(stream.String())
    UiDetails := stream.UInt32LE()
    rmcResult, returnValue := Friends_BlackListByName(StrPlayerName,UiDetails)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_ClearRelationship_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    rmcResult, returnValue := Friends_ClearRelationship(UiPlayer)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_UpdateDetails_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiPlayer := stream.UInt32LE()
    UiDetails := stream.UInt32LE()
    rmcResult, returnValue := Friends_UpdateDetails(UiPlayer,UiDetails)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_GetList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ByRelationship := stream.UInt8()
    BReversed := stream.Bool()
    rmcResult, LstFriendsList := Friends_GetList(ByRelationship,BReversed)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data uint32) { innerStream.UInt32LE(data) }, LstFriendsList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_GetDetailedList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ByRelationship := stream.UInt8()
    BReversed := stream.Bool()
    rmcResult, LstFriendsList := Friends_GetDetailedList(ByRelationship,BReversed)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendData) { innerStream.Struct(data) }, LstFriendsList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_GetRelationships_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, UiTotalCount,LstRelationshipsList := Friends_GetRelationships(ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(UiTotalCount)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.RelationshipData) { innerStream.Struct(data) }, LstRelationshipsList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdateProfile_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ProfileData := stream.Struct("MyProfile").(NEX.MyProfile)
    rmcResult := Friends_3DS_UpdateProfile(ProfileData)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdateMii_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Mii := stream.Struct("Mii").(NEX.Mii)
    rmcResult := Friends_3DS_UpdateMii(Mii)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdateMiiList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    MiiList := stream.Struct("MiiList").(NEX.MiiList)
    rmcResult := Friends_3DS_UpdateMiiList(MiiList)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdatePlayedGames_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PlayedGames := stream.List("PlayedGame", func (innerStream *NEX.InputStream) NEX.PlayedGame { return innerStream.Struct("PlayedGame").(NEX.PlayedGame) }).([]NEX.PlayedGame)
    rmcResult := Friends_3DS_UpdatePlayedGames(PlayedGames)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdatePreference_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.Bool()
    Unknown2 := stream.Bool()
    Unknown3 := stream.Bool()
    rmcResult := Friends_3DS_UpdatePreference(Unknown,Unknown2,Unknown3)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendMii_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Friends := stream.List("FriendMiiRequest", func (innerStream *NEX.InputStream) NEX.FriendMiiRequest { return innerStream.Struct("FriendMiiRequest").(NEX.FriendMiiRequest) }).([]NEX.FriendMiiRequest)
    rmcResult := Friends_3DS_GetFriendMii(Friends)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendMiiList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Friends := stream.List("FriendMiiRequest", func (innerStream *NEX.InputStream) NEX.FriendMiiRequest { return innerStream.Struct("FriendMiiRequest").(NEX.FriendMiiRequest) }).([]NEX.FriendMiiRequest)
    rmcResult, MiiLists := Friends_3DS_GetFriendMiiList(Friends)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendMiiList) { innerStream.Struct(data) }, MiiLists)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendRelationships_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, FriendRelationships := Friends_3DS_GetFriendRelationships(Unknown)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendRelationship) { innerStream.Struct(data) }, FriendRelationships)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_AddFriendByPrincipalID_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.UInt64LE()
    PrincipalId := stream.UInt32LE()
    rmcResult, FriendRelationship := Friends_3DS_AddFriendByPrincipalID(Unknown,PrincipalId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(FriendRelationship)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetAllFriends_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, FriendRelationships := Friends_3DS_GetAllFriends()
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendRelationship) { innerStream.Struct(data) }, FriendRelationships)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_SyncFriend_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.UInt64LE()
    Unknown2 := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    Unknown3 := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    rmcResult, FriendList := Friends_3DS_SyncFriend(Unknown,Unknown2,Unknown3)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendRelationship) { innerStream.Struct(data) }, FriendList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdatePresence_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PresenceInfo := stream.Struct("NintendoPresence").(NEX.NintendoPresence)
    Unknown := stream.Bool()
    rmcResult := Friends_3DS_UpdatePresence(PresenceInfo,Unknown)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdateFavoriteGameKey_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    GameKey := stream.Struct("GameKey").(NEX.GameKey)
    rmcResult := Friends_3DS_UpdateFavoriteGameKey(GameKey)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_UpdateComment_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Comment := string(stream.String())
    rmcResult := Friends_3DS_UpdateComment(Comment)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendPresence_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, FriendPresenceList := Friends_3DS_GetFriendPresence(Unknown)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendPresence) { innerStream.Struct(data) }, FriendPresenceList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendPicture_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, FriendPictures := Friends_3DS_GetFriendPicture(Unknown)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendPicture) { innerStream.Struct(data) }, FriendPictures)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_GetFriendPersistentInfo_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, PersistentInfo := Friends_3DS_GetFriendPersistentInfo(Unknown)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendPersistentInfo) { innerStream.Struct(data) }, PersistentInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_3DS_SendInvitation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult := Friends_3DS_SendInvitation(Unknown)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_GetAllInformation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    NNAInfo := stream.Struct("NNAInfo").(NEX.NNAInfo)
    NintendoPresence := stream.Struct("NintendoPresenceV2").(NEX.NintendoPresenceV2)
    Birthday := NEX.DateTime(stream.UInt64LE())
    rmcResult, PrincipalPreference,StatusMessage,FriendList,SentFriendRequests,ReceivedFriendRequests,Blacklist,Unknown,Notifications,Unknown2 := Friends_Wii_U_GetAllInformation(NNAInfo,NintendoPresence,Birthday)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PrincipalPreference)
    responseStream.Struct(StatusMessage)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendInfo) { innerStream.Struct(data) }, FriendList)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendRequest) { innerStream.Struct(data) }, SentFriendRequests)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FriendRequest) { innerStream.Struct(data) }, ReceivedFriendRequests)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.BlacklistedPrincipal) { innerStream.Struct(data) }, Blacklist)
    responseStream.Bool(Unknown)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PersistentNotification) { innerStream.Struct(data) }, Notifications)
    responseStream.Bool(Unknown2)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_AddFriend_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    rmcResult, FriendRequest,FriendInfo := Friends_Wii_U_AddFriend(Pid)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(FriendRequest)
    responseStream.Struct(FriendInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_AddFriendByName_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Name := string(stream.String())
    rmcResult, FriendRequest,FriendInfo := Friends_Wii_U_AddFriendByName(Name)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(FriendRequest)
    responseStream.Struct(FriendInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_RemoveFriend_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    rmcResult := Friends_Wii_U_RemoveFriend(Pid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_AddFriendRequest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.UInt32LE()
    Unknown2 := stream.UInt8()
    Unknown3 := string(stream.String())
    Unknown4 := stream.UInt8()
    Unknown5 := string(stream.String())
    GameKey := stream.Struct("GameKey").(NEX.GameKey)
    Unknown6 := NEX.DateTime(stream.UInt64LE())
    rmcResult, FriendRequest,FriendInfo := Friends_Wii_U_AddFriendRequest(Unknown,Unknown2,Unknown3,Unknown4,Unknown5,GameKey,Unknown6)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(FriendRequest)
    responseStream.Struct(FriendInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_CancelFriendRequest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt64LE()
    rmcResult := Friends_Wii_U_CancelFriendRequest(Id)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_AcceptFriendRequest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt64LE()
    rmcResult, FriendInfo := Friends_Wii_U_AcceptFriendRequest(Id)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(FriendInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_DeleteFriendRequest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt64LE()
    rmcResult := Friends_Wii_U_DeleteFriendRequest(Id)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_DenyFriendRequest_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt64LE()
    rmcResult, BlacklistedPrincipal := Friends_Wii_U_DenyFriendRequest(Id)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(BlacklistedPrincipal)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_MarkFriendRequestsAsReceived_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    FriendRequests := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    rmcResult := Friends_Wii_U_MarkFriendRequestsAsReceived(FriendRequests)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_AddBlackList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    BlacklistedPrincipal := stream.Struct("BlacklistedPrincipal").(NEX.BlacklistedPrincipal)
    rmcResult, BlacklistedPrincipal := Friends_Wii_U_AddBlackList(BlacklistedPrincipal)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(BlacklistedPrincipal)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_RemoveBlackList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    rmcResult := Friends_Wii_U_RemoveBlackList(Pid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_UpdatePresence_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    NintendoPresence := stream.Struct("NintendoPresenceV2").(NEX.NintendoPresenceV2)
    rmcResult := Friends_Wii_U_UpdatePresence(NintendoPresence)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_UpdateMii_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Mii := stream.Struct("MiiV2").(NEX.MiiV2)
    rmcResult, Unknown := Friends_Wii_U_UpdateMii(Mii)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(uint64(Unknown))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_UpdateComment_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StatusMessage := stream.Struct("Comment").(NEX.Comment)
    rmcResult, Unknown := Friends_Wii_U_UpdateComment(StatusMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(uint64(Unknown))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_UpdatePreference_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PrincipalPreferenc := stream.Struct("PrincipalPreference").(NEX.PrincipalPreference)
    rmcResult := Friends_Wii_U_UpdatePreference(PrincipalPreferenc)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_GetBasicInfo_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pids := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult, Infos := Friends_Wii_U_GetBasicInfo(Pids)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PrincipalBasicInfo) { innerStream.Struct(data) }, Infos)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_DeleteFriendFlags_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("PersistentNotification", func (innerStream *NEX.InputStream) NEX.PersistentNotification { return innerStream.Struct("PersistentNotification").(NEX.PersistentNotification) }).([]NEX.PersistentNotification)
    rmcResult := Friends_Wii_U_DeleteFriendFlags(Unknown)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_CheckSettingStatus_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, Unknown := Friends_Wii_U_CheckSettingStatus()
    responseStream := NEX.NewOutputStream()
    responseStream.UInt8(Unknown)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Friends_Wii_U_GetRequestBlockSettings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Unknown := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, Settings := Friends_Wii_U_GetRequestBlockSettings(Unknown)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PrincipalRequestBlockSetting) { innerStream.Struct(data) }, Settings)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_RegisterGathering_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue := Match_Making_RegisterGathering(AnyGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UnregisterGathering_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, returnValue := Match_Making_UnregisterGathering(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UnregisterGatherings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstGatherings := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, returnValue := Match_Making_UnregisterGatherings(LstGatherings)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UpdateGathering_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue := Match_Making_UpdateGathering(AnyGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Invite_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    LstPrincipals := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_Invite(IdGathering,LstPrincipals,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_AcceptInvitation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_AcceptInvitation(IdGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_DeclineInvitation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_DeclineInvitation(IdGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_CancelInvitation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    LstPrincipals := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_CancelInvitation(IdGathering,LstPrincipals,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetInvitationsSent_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, LstInvitations := Match_Making_GetInvitationsSent(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Invitation) { innerStream.Struct(data) }, LstInvitations)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetInvitationsReceived_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, LstInvitations := Match_Making_GetInvitationsReceived()
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Invitation) { innerStream.Struct(data) }, LstInvitations)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Participate_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_Participate(IdGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_CancelParticipation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_CancelParticipation(IdGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, LstParticipants := Match_Making_GetParticipants(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PID) { innerStream.UInt32LE(uint32(data)) }, LstParticipants)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_AddParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    LstParticipants := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_AddParticipants(IdGathering,LstParticipants,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetDetailedParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, LstParticipants := Match_Making_GetDetailedParticipants(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.ParticipantDetails) { innerStream.Struct(data) }, LstParticipants)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetParticipantsURLs_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, LstStationURL := Match_Making_GetParticipantsURLs(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.StationURL) { innerStream.String(string(data)) }, LstStationURL)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByType_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrType := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindByType(StrType,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByDescription_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrDescription := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindByDescription(StrDescription,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByDescriptionRegex_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrDescriptionRegex := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindByDescriptionRegex(StrDescriptionRegex,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByID_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstID := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, LstGathering := Match_Making_FindByID(LstID)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindBySingleID_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt32LE()
    rmcResult, BResult,PGathering := Match_Making_FindBySingleID(Id)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(BResult)
    responseStream.Struct(PGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByOwner_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := NEX.PID(stream.UInt32LE())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindByOwner(Id,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult, LstGathering := Match_Making_FindByParticipants(Pid)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindInvitations_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindInvitations(ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindBySQLQuery_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrQuery := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindBySQLQuery(StrQuery,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_LaunchSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrURL := string(stream.String())
    rmcResult, returnValue := Match_Making_LaunchSession(IdGathering,StrURL)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UpdateSessionURL_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrURL := string(stream.String())
    rmcResult, returnValue := Match_Making_UpdateSessionURL(IdGathering,StrURL)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetSessionURL_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, returnValue,StrURL := Match_Making_GetSessionURL(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.String(string(StrURL))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetState_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    rmcResult, returnValue,UiState := Match_Making_GetState(IdGathering)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.UInt32LE(UiState)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_SetState_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    UiNewState := stream.UInt32LE()
    rmcResult, returnValue := Match_Making_SetState(IdGathering,UiNewState)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_ReportStats_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    LstStats := stream.List("GatheringStats", func (innerStream *NEX.InputStream) NEX.GatheringStats { return innerStream.Struct("GatheringStats").(NEX.GatheringStats) }).([]NEX.GatheringStats)
    rmcResult, returnValue := Match_Making_ReportStats(IdGathering,LstStats)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetStats_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    LstParticipants := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    LstColumns := stream.List("byte", func (innerStream *NEX.InputStream) uint8 { return innerStream.UInt8() }).([]uint8)
    rmcResult, returnValue,PlstStats := Match_Making_GetStats(IdGathering,LstParticipants,LstColumns)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.GatheringStats) { innerStream.Struct(data) }, PlstStats)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_DeleteGathering_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult, returnValue := Match_Making_DeleteGathering(Gid)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetPendingDeletions_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiReason := stream.UInt32LE()
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, returnValue,LstDeletions := Match_Making_GetPendingDeletions(UiReason,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.DeletionEntry) { innerStream.Struct(data) }, LstDeletions)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_DeleteFromDeletions_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstDeletions := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, returnValue := Match_Making_DeleteFromDeletions(LstDeletions)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_MigrateGatheringOwnershipV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    LstPotentialNewOwnersID := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult, returnValue := Match_Making_MigrateGatheringOwnershipV1(Gid,LstPotentialNewOwnersID)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_FindByDescriptionLike_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrDescriptionLike := string(stream.String())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Match_Making_FindByDescriptionLike(StrDescriptionLike,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_RegisterLocalURL_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    Url := NEX.StationURL(stream.String())
    rmcResult := Match_Making_RegisterLocalURL(Gid,Url)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_RegisterLocalURLs_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    LstUrls := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    rmcResult := Match_Making_RegisterLocalURLs(Gid,LstUrls)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UpdateSessionHostV1_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult := Match_Making_UpdateSessionHostV1(Gid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_GetSessionURLs_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult, LstURLs := Match_Making_GetSessionURLs(Gid)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.StationURL) { innerStream.String(string(data)) }, LstURLs)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UpdateSessionHost_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    IsMigrateOwner := stream.Bool()
    rmcResult := Match_Making_UpdateSessionHost(Gid,IsMigrateOwner)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_UpdateGatheringOwnership_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    ParticipantsOnly := stream.Bool()
    rmcResult, returnValue := Match_Making_UpdateGatheringOwnership(Gid,ParticipantsOnly)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_MigrateGatheringOwnership_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    LstPotentialNewOwnersID := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    ParticipantsOnly := stream.Bool()
    rmcResult := Match_Making_MigrateGatheringOwnership(Gid,LstPotentialNewOwnersID,ParticipantsOnly)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_EndParticipation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, returnValue := Match_Making_Ext_EndParticipation(IdGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_GetParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    BOnlyActive := stream.Bool()
    rmcResult, LstParticipants := Match_Making_Ext_GetParticipants(IdGathering,BOnlyActive)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PID) { innerStream.UInt32LE(uint32(data)) }, LstParticipants)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_GetDetailedParticipants_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IdGathering := stream.UInt32LE()
    BOnlyActiv := stream.Bool()
    rmcResult, LstParticipants := Match_Making_Ext_GetDetailedParticipants(IdGathering,BOnlyActiv)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.ParticipantDetails) { innerStream.Struct(data) }, LstParticipants)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_GetParticipantsURLs_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstGatherings := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, LstGatheringURLs := Match_Making_Ext_GetParticipantsURLs(LstGatherings)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.GatheringURLs) { innerStream.Struct(data) }, LstGatheringURLs)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_GetGatheringRelations_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := stream.UInt32LE()
    Descr := string(stream.String())
    rmcResult, returnValue := Match_Making_Ext_GetGatheringRelations(Id,Descr)
    responseStream := NEX.NewOutputStream()
    responseStream.String(string(returnValue))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Match_Making_Ext_DeleteFromDeletions_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstDeletions := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    Pid := NEX.PID(stream.UInt32LE())
    rmcResult := Match_Making_Ext_DeleteFromDeletions(LstDeletions,Pid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_CloseParticipation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult := Matchmake_Extension_CloseParticipation(Gid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_OpenParticipation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult := Matchmake_Extension_OpenParticipation(Gid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_AutoMatchmake_Postpone_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    StrMessage := string(stream.String())
    rmcResult, JoinedGathering := Matchmake_Extension_AutoMatchmake_Postpone(AnyGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering := Matchmake_Extension_BrowseMatchmakeSession(SearchCriteria,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSessionWithHostUrls_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstGathering,LstGatheringUrls := Matchmake_Extension_BrowseMatchmakeSessionWithHostUrls(SearchCriteria,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstGathering)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.GatheringURLs) { innerStream.Struct(data) }, LstGatheringUrls)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_CreateMatchmakeSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    StrMessage := string(stream.String())
    ParticipationCount := stream.UInt16LE()
    rmcResult, Gid,SessionKey := Matchmake_Extension_CreateMatchmakeSession(AnyGathering,StrMessage,ParticipationCount)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(Gid)
    responseStream.Buffer(SessionKey)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_JoinMatchmakeSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    StrMessage := string(stream.String())
    rmcResult, SessionKey := Matchmake_Extension_JoinMatchmakeSession(Gid,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Buffer(SessionKey)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_ModifyCurrentGameAttribute_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    AttribIndex := stream.UInt32LE()
    NewValue := stream.UInt32LE()
    rmcResult := Matchmake_Extension_ModifyCurrentGameAttribute(Gid,AttribIndex,NewValue)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateNotificationData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiType := stream.UInt32LE()
    UiParam1 := stream.UInt64LE()
    UiParam2 := stream.UInt64LE()
    StrParam := string(stream.String())
    rmcResult := Matchmake_Extension_UpdateNotificationData(UiType,UiParam1,UiParam2,StrParam)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetFriendNotificationData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiType := stream.Int32LE()
    rmcResult, DataList := Matchmake_Extension_GetFriendNotificationData(UiType)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.NotificationEvent) { innerStream.Struct(data) }, DataList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateApplicationBuffer_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    ApplicationBuffer := stream.Buffer()
    rmcResult := Matchmake_Extension_UpdateApplicationBuffer(Gid,ApplicationBuffer)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateMatchmakeSessionAttribute_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    Attribs := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult := Matchmake_Extension_UpdateMatchmakeSessionAttribute(Gid,Attribs)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetlstFriendNotificationData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstTypes := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, DataList := Matchmake_Extension_GetlstFriendNotificationData(LstTypes)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.NotificationEvent) { innerStream.Struct(data) }, DataList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateMatchmakeSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    rmcResult := Matchmake_Extension_UpdateMatchmakeSession(AnyGathering)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_AutoMatchmakeWithSearchCriteria_Postpone_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstSearchCriteria := stream.List("MatchmakeSessionSearchCriteria", func (innerStream *NEX.InputStream) NEX.MatchmakeSessionSearchCriteria { return innerStream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria) }).([]NEX.MatchmakeSessionSearchCriteria)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    StrMessage := string(stream.String())
    rmcResult, JoinedGathering := Matchmake_Extension_AutoMatchmakeWithSearchCriteria_Postpone(LstSearchCriteria,AnyGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetPlayingSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstPid := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult, LstPlayingSession := Matchmake_Extension_GetPlayingSession(LstPid)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PlayingSession) { innerStream.Struct(data) }, LstPlayingSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_CreateCommunity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Community := stream.Struct("PersistentGathering").(NEX.PersistentGathering)
    StrMessage := string(stream.String())
    rmcResult, Gid := Matchmake_Extension_CreateCommunity(Community,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(Gid)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateCommunity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Community := stream.Struct("PersistentGathering").(NEX.PersistentGathering)
    rmcResult := Matchmake_Extension_UpdateCommunity(Community)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_JoinCommunity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    StrMessage := string(stream.String())
    StrPassword := string(stream.String())
    rmcResult := Matchmake_Extension_JoinCommunity(Gid,StrMessage,StrPassword)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindCommunityByGatheringId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstGid := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, LstCommunity := Matchmake_Extension_FindCommunityByGatheringId(LstGid)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PersistentGathering) { innerStream.Struct(data) }, LstCommunity)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindOfficialCommunity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IsAvailableOnly := stream.Bool()
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstCommunity := Matchmake_Extension_FindOfficialCommunity(IsAvailableOnly,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PersistentGathering) { innerStream.Struct(data) }, LstCommunity)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindCommunityByParticipant_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstCommunity := Matchmake_Extension_FindCommunityByParticipant(Pid,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PersistentGathering) { innerStream.Struct(data) }, LstCommunity)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdatePrivacySetting_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OnlineStatus := stream.Bool()
    ParticipationCommunity := stream.Bool()
    rmcResult := Matchmake_Extension_UpdatePrivacySetting(OnlineStatus,ParticipationCommunity)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetMyBlockList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, LstPrincipalId := Matchmake_Extension_GetMyBlockList()
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PID) { innerStream.UInt32LE(uint32(data)) }, LstPrincipalId)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_AddToBlockList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstPrincipalId := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult := Matchmake_Extension_AddToBlockList(LstPrincipalId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_RemoveFromBlockList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstPrincipalId := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    rmcResult := Matchmake_Extension_RemoveFromBlockList(LstPrincipalId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_ClearMyBlockList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult := Matchmake_Extension_ClearMyBlockList()
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_ReportViolation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    UserName := string(stream.String())
    ViolationCode := stream.UInt32LE()
    rmcResult := Matchmake_Extension_ReportViolation(Pid,UserName,ViolationCode)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_IsViolationUser_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, Flag,Score := Matchmake_Extension_IsViolationUser()
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(Flag)
    responseStream.UInt32LE(Score)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_JoinMatchmakeSessionEx_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    StrMessage := string(stream.String())
    DontCareMyBlockList := stream.Bool()
    ParticipationCount := stream.UInt16LE()
    rmcResult, SessionKey := Matchmake_Extension_JoinMatchmakeSessionEx(Gid,StrMessage,DontCareMyBlockList,ParticipationCount)
    responseStream := NEX.NewOutputStream()
    responseStream.Buffer(SessionKey)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetSimplePlayingSession_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstPrincipalId := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    IncludeLoginUser := stream.Bool()
    rmcResult, LstSimplePlayingSession := Matchmake_Extension_GetSimplePlayingSession(LstPrincipalId,IncludeLoginUser)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.SimplePlayingSession) { innerStream.Struct(data) }, LstSimplePlayingSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GetSimpleCommunity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    GatheringIdList := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, LstSimpleCommunityList := Matchmake_Extension_GetSimpleCommunity(GatheringIdList)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.SimpleCommunity) { innerStream.Struct(data) }, LstSimpleCommunityList)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_AutoMatchmakeWithGatheringId_Postpone_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstGid := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    AnyGathering := stream.Struct("Data").(NEX.Data)
    StrMessage := string(stream.String())
    rmcResult, JoinedGathering := Matchmake_Extension_AutoMatchmakeWithGatheringId_Postpone(LstGid,AnyGathering,StrMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedGathering)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateProgressScore_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    ProgressScore := stream.UInt8()
    rmcResult := Matchmake_Extension_UpdateProgressScore(Gid,ProgressScore)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_DebugNotifyEvent_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Pid := NEX.PID(stream.UInt32LE())
    MainType := stream.UInt32LE()
    SubType := stream.UInt32LE()
    Param1 := stream.UInt64LE()
    Param2 := stream.UInt64LE()
    StringParam := string(stream.String())
    rmcResult := Matchmake_Extension_DebugNotifyEvent(Pid,MainType,SubType,Param1,Param2,StringParam)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_GenerateMatchmakeSessionSystemPassword_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult, Password := Matchmake_Extension_GenerateMatchmakeSessionSystemPassword(Gid)
    responseStream := NEX.NewOutputStream()
    responseStream.String(string(Password))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_ClearMatchmakeSessionSystemPassword_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult := Matchmake_Extension_ClearMatchmakeSessionSystemPassword(Gid)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_CreateMatchmakeSessionWithParam_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    CreateMatchmakeSessionParam := stream.Struct("CreateMatchmakeSessionParam").(NEX.CreateMatchmakeSessionParam)
    rmcResult, JoinedMatchmakeSession := Matchmake_Extension_CreateMatchmakeSessionWithParam(CreateMatchmakeSessionParam)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_JoinMatchmakeSessionWithParam_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    JoinMatchmakeSessionParam := stream.Struct("JoinMatchmakeSessionParam").(NEX.JoinMatchmakeSessionParam)
    rmcResult, JoinedMatchmakeSession := Matchmake_Extension_JoinMatchmakeSessionWithParam(JoinMatchmakeSessionParam)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_AutoMatchmakeWithParam_Postpone_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AutoMatchmakeParam := stream.Struct("AutoMatchmakeParam").(NEX.AutoMatchmakeParam)
    rmcResult, JoinedMatchmakeSession := Matchmake_Extension_AutoMatchmakeWithParam_Postpone(AutoMatchmakeParam)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(JoinedMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindMatchmakeSessionByGatheringIdDetail_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult, MatchmakeSession := Matchmake_Extension_FindMatchmakeSessionByGatheringIdDetail(Gid)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(MatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSessionNoHolder_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstMatchmakeSession := Matchmake_Extension_BrowseMatchmakeSessionNoHolder(SearchCriteria,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSessionWithHostUrlsNoHolder_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstMatchmakeSession,LstGatheringUrls := Matchmake_Extension_BrowseMatchmakeSessionWithHostUrlsNoHolder(SearchCriteria,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.GatheringURLs) { innerStream.Struct(data) }, LstGatheringUrls)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_UpdateMatchmakeSessionPart_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UpdateMatchmakeSessionParam := stream.Struct("UpdateMatchmakeSessionParam").(NEX.UpdateMatchmakeSessionParam)
    rmcResult := Matchmake_Extension_UpdateMatchmakeSessionPart(UpdateMatchmakeSessionParam)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_RequestMatchmaking_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    AutoMatchmakeParam := stream.Struct("AutoMatchmakeParam").(NEX.AutoMatchmakeParam)
    rmcResult, RequestId := Matchmake_Extension_RequestMatchmaking(AutoMatchmakeParam)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(RequestId)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_WithdrawMatchmaking_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    RequestId := stream.UInt64LE()
    rmcResult := Matchmake_Extension_WithdrawMatchmaking(RequestId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_WithdrawMatchmakingAll_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult := Matchmake_Extension_WithdrawMatchmakingAll()
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindMatchmakeSessionByGatheringId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    LstGid := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult, LstMatchmakeSession := Matchmake_Extension_FindMatchmakeSessionByGatheringId(LstGid)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindMatchmakeSessionBySingleGatheringId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Gid := stream.UInt32LE()
    rmcResult, MatchmakeSession := Matchmake_Extension_FindMatchmakeSessionBySingleGatheringId(Gid)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(MatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindMatchmakeSessionByOwner_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Id := NEX.PID(stream.UInt32LE())
    ResultRange := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstMatchmakeSession := Matchmake_Extension_FindMatchmakeSessionByOwner(Id,ResultRange)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_FindMatchmakeSessionByParticipant_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Param := stream.Struct("FindMatchmakeSessionByParticipantParam").(NEX.FindMatchmakeSessionByParticipantParam)
    rmcResult, LstSession := Matchmake_Extension_FindMatchmakeSessionByParticipant(Param)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.FindMatchmakeSessionByParticipantResult) { innerStream.Struct(data) }, LstSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSessionNoHolderNoResultRange_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    rmcResult, LstMatchmakeSession := Matchmake_Extension_BrowseMatchmakeSessionNoHolderNoResultRange(SearchCriteria)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Matchmake_Extension_BrowseMatchmakeSessionWithHostUrlsNoHolderNoResultRange_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    SearchCriteria := stream.Struct("MatchmakeSessionSearchCriteria").(NEX.MatchmakeSessionSearchCriteria)
    rmcResult, LstMatchmakeSession,LstGatheringUrls := Matchmake_Extension_BrowseMatchmakeSessionWithHostUrlsNoHolderNoResultRange(SearchCriteria)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.MatchmakeSession) { innerStream.Struct(data) }, LstMatchmakeSession)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.GatheringURLs) { innerStream.Struct(data) }, LstGatheringUrls)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Message_Delivery_DeliverMessage_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OUserMessage := stream.Struct("Data").(NEX.Data)
    rmcResult := Message_Delivery_DeliverMessage(OUserMessage)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_DeliverMessage_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OUserMessage := stream.Struct("Data").(NEX.Data)
    rmcResult, OModifiedMessage,LstSandboxNodeId,LstParticipants := Messaging_DeliverMessage(OUserMessage)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(OModifiedMessage)
    responseStream.List(func (innerStream *NEX.OutputStream, data uint32) { innerStream.UInt32LE(data) }, LstSandboxNodeId)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.PID) { innerStream.UInt32LE(uint32(data)) }, LstParticipants)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_GetNumberOfMessages_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    rmcResult, UiNbMessages := Messaging_GetNumberOfMessages(Recipient)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(UiNbMessages)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_GetMessagesHeaders_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    Range := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstMsgHeaders := Messaging_GetMessagesHeaders(Recipient,Range)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.UserMessage) { innerStream.Struct(data) }, LstMsgHeaders)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_RetrieveAllMessagesWithinRange_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    Range := stream.Struct("ResultRange").(NEX.ResultRange)
    rmcResult, LstMessages := Messaging_RetrieveAllMessagesWithinRange(Recipient,Range)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstMessages)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_RetrieveMessages_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    LstMsgIDs := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    BLeaveOnServer := stream.Bool()
    rmcResult, LstMessages := Messaging_RetrieveMessages(Recipient,LstMsgIDs,BLeaveOnServer)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstMessages)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_DeleteMessages_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    LstMessagesToDelete := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    rmcResult := Messaging_DeleteMessages(Recipient,LstMessagesToDelete)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Messaging_DeleteAllMessages_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Recipient := stream.Struct("MessageRecipient").(NEX.MessageRecipient)
    rmcResult, UiNbDeletedMessages := Messaging_DeleteAllMessages(Recipient)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(UiNbDeletedMessages)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Monitoring_PingDaemon_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, returnValue := Monitoring_PingDaemon()
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Monitoring_GetClusterMembers_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, StrValues := Monitoring_GetClusterMembers()
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data string) { innerStream.String(string(data)) }, StrValues)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_RequestProbeInitiation_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UrlTargetList := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    rmcResult := NAT_Traversal_RequestProbeInitiation(UrlTargetList)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_InitiateProbe_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UrlStationToProbe := NEX.StationURL(stream.String())
    rmcResult := NAT_Traversal_InitiateProbe(UrlStationToProbe)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_RequestProbeInitiationExt_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UrlTargetList := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    UrlStationToProbe := NEX.StationURL(stream.String())
    rmcResult := NAT_Traversal_RequestProbeInitiationExt(UrlTargetList,UrlStationToProbe)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_ReportNATTraversalResult_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Cid := stream.UInt32LE()
    Result := stream.Bool()
    Rtt := stream.UInt32LE()
    rmcResult := NAT_Traversal_ReportNATTraversalResult(Cid,Result,Rtt)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_ReportNATProperties_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Natmapping := stream.UInt32LE()
    Natfiltering := stream.UInt32LE()
    Rtt := stream.UInt32LE()
    rmcResult := NAT_Traversal_ReportNATProperties(Natmapping,Natfiltering,Rtt)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_GetRelaySignatureKey_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, RelayMode,CurrentUTCTime,Address,Port,RelayAddressType,GameServerID := NAT_Traversal_GetRelaySignatureKey()
    responseStream := NEX.NewOutputStream()
    responseStream.Int32LE(RelayMode)
    responseStream.UInt64LE(uint64(CurrentUTCTime))
    responseStream.String(string(Address))
    responseStream.UInt16LE(Port)
    responseStream.Int32LE(RelayAddressType)
    responseStream.UInt32LE(GameServerID)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func NAT_Traversal_ReportNATTraversalResultDetail_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Cid := stream.UInt32LE()
    Result := stream.Bool()
    Detail := stream.Int32LE()
    Rtt := stream.UInt32LE()
    rmcResult := NAT_Traversal_ReportNATTraversalResultDetail(Cid,Result,Detail,Rtt)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Nintendo_Notifications_ProcessNintendoNotificationEvent_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    EventObject := stream.Struct("NintendoNotificationEvent").(NEX.NintendoNotificationEvent)
    rmcResult := Nintendo_Notifications_ProcessNintendoNotificationEvent(EventObject)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Notifications_ProcessNotificationEvent_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    OEvent := stream.Struct("NotificationEvent").(NEX.NotificationEvent)
    rmcResult := Notifications_ProcessNotificationEvent(OEvent)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_FindByGroup_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    rmcResult, LstTags := Persistent_Store_FindByGroup(UiGroup)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data string) { innerStream.String(string(data)) }, LstTags)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_InsertItem_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    BufData := stream.Buffer()
    BReplace := stream.Bool()
    rmcResult, BResult := Persistent_Store_InsertItem(UiGroup,StrTag,BufData,BReplace)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(BResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_RemoveItem_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    rmcResult, BResult := Persistent_Store_RemoveItem(UiGroup,StrTag)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(BResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_GetItem_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    rmcResult, BufData,BResult := Persistent_Store_GetItem(UiGroup,StrTag)
    responseStream := NEX.NewOutputStream()
    responseStream.Buffer(BufData)
    responseStream.Bool(BResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_InsertCustomItem_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    HData := stream.Struct("Data").(NEX.Data)
    BReplace := stream.Bool()
    rmcResult := Persistent_Store_InsertCustomItem(UiGroup,StrTag,HData,BReplace)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_GetCustomItem_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    rmcResult, HData := Persistent_Store_GetCustomItem(UiGroup,StrTag)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(HData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Persistent_Store_FindItemsBySQLQuery_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UiGroup := stream.UInt32LE()
    StrTag := string(stream.String())
    StrQuery := string(stream.String())
    rmcResult, LstData := Persistent_Store_FindItemsBySQLQuery(UiGroup,StrTag,StrQuery)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.Data) { innerStream.Struct(data) }, LstData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_UploadScore_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ScoreData := stream.Struct("RankingScoreData").(NEX.RankingScoreData)
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_UploadScore(ScoreData,UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_DeleteScore_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Category := stream.UInt32LE()
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_DeleteScore(Category,UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_DeleteAllScores_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_DeleteAllScores(UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_UploadCommonData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    CommonData := stream.Buffer()
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_UploadCommonData(CommonData,UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_DeleteCommonData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_DeleteCommonData(UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetCommonData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UniqueId := stream.UInt64LE()
    rmcResult, CommonData := Ranking_GetCommonData(UniqueId)
    responseStream := NEX.NewOutputStream()
    responseStream.Buffer(CommonData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_ChangeAttributes_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Category := stream.UInt32LE()
    ChangeParam := stream.Struct("RankingChangeAttributesParam").(NEX.RankingChangeAttributesParam)
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_ChangeAttributes(Category,ChangeParam,UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_ChangeAllAttributes_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ChangeParam := stream.Struct("RankingChangeAttributesParam").(NEX.RankingChangeAttributesParam)
    UniqueId := stream.UInt64LE()
    rmcResult := Ranking_ChangeAllAttributes(ChangeParam,UniqueId)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetRanking_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    RankingMode := stream.UInt8()
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    UniqueId := stream.UInt64LE()
    PrincipalId := NEX.PID(stream.UInt32LE())
    rmcResult, PResult := Ranking_GetRanking(RankingMode,Category,OrderParam,UniqueId,PrincipalId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetApproxOrder_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    Score := stream.UInt32LE()
    UniqueId := stream.UInt64LE()
    PrincipalId := stream.UInt32LE()
    rmcResult, POrder := Ranking_GetApproxOrder(Category,OrderParam,Score,UniqueId,PrincipalId)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(POrder)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetStats_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    Flags := stream.UInt32LE()
    rmcResult, PStats := Ranking_GetStats(Category,OrderParam,Flags)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PStats)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetRankingByPIDList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    PrincipalIdList := stream.List("PID", func (innerStream *NEX.InputStream) NEX.PID { return NEX.PID(innerStream.UInt32LE()) }).([]NEX.PID)
    RankingMode := stream.UInt8()
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    UniqueId := stream.UInt64LE()
    rmcResult, PResult := Ranking_GetRankingByPIDList(PrincipalIdList,RankingMode,Category,OrderParam,UniqueId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetRankingByUniqueIdList_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    NexUniqueIdList := stream.List("Uint64", func (innerStream *NEX.InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    RankingMode := stream.UInt8()
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    UniqueId := stream.UInt64LE()
    rmcResult, PResult := Ranking_GetRankingByUniqueIdList(NexUniqueIdList,RankingMode,Category,OrderParam,UniqueId)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetCachedTopXRanking_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Category := stream.UInt32LE()
    OrderParam := stream.Struct("RankingOrderParam").(NEX.RankingOrderParam)
    rmcResult, PResult := Ranking_GetCachedTopXRanking(Category,OrderParam)
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PResult)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Ranking_GetCachedTopXRankings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Categories := stream.List("Uint32", func (innerStream *NEX.InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    OrderParams := stream.List("RankingOrderParam", func (innerStream *NEX.InputStream) NEX.RankingOrderParam { return innerStream.Struct("RankingOrderParam").(NEX.RankingOrderParam) }).([]NEX.RankingOrderParam)
    rmcResult, PResults := Ranking_GetCachedTopXRankings(Categories,OrderParams)
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.RankingCachedResult) { innerStream.Struct(data) }, PResults)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Remote_Log_Device_Log_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Message := string(stream.String())
    rmcResult := Remote_Log_Device_Log(Message)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_Register_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    VecMyURLs := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    rmcResult, returnValue,PidConnectionID,UrlPublic := Secure_Connection_Register(VecMyURLs)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(PidConnectionID)
    responseStream.String(string(UrlPublic))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_RequestConnectionData_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    CidTarget := stream.UInt32LE()
    PidTarget := stream.UInt32LE()
    rmcResult, returnValue,PvecConnectionsData := Secure_Connection_RequestConnectionData(CidTarget,PidTarget)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.ConnectionData) { innerStream.Struct(data) }, PvecConnectionsData)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_RequestUrls_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    CidTarget := stream.UInt32LE()
    PidTarget := stream.UInt32LE()
    rmcResult, returnValue,PlstURLs := Secure_Connection_RequestUrls(CidTarget,PidTarget)
    responseStream := NEX.NewOutputStream()
    responseStream.Bool(returnValue)
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.StationURL) { innerStream.String(string(data)) }, PlstURLs)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_RegisterEx_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    VecMyURLs := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    HCustomData := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue,PidConnectionID,UrlPublic := Secure_Connection_RegisterEx(VecMyURLs, HCustomData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(PidConnectionID)
    responseStream.String(string(UrlPublic))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_TestConnectivity_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult := Secure_Connection_TestConnectivity()
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_UpdateURLs_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    VecMyURLs := stream.List("StationURL", func (innerStream *NEX.InputStream) NEX.StationURL { return NEX.StationURL(innerStream.String()) }).([]NEX.StationURL)
    rmcResult := Secure_Connection_UpdateURLs(VecMyURLs)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_ReplaceURL_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    Target := NEX.StationURL(stream.String())
    Url := NEX.StationURL(stream.String())
    rmcResult := Secure_Connection_ReplaceURL(Target,Url)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Secure_Connection_SendReport_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    ReportId := stream.UInt32LE()
    ReportData := stream.Buffer()
    rmcResult := Secure_Connection_SendReport(ReportId,ReportData)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Simple_Authentication_LoginWithTokenEx_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StrToken := string(stream.String())
    PConnectionData := stream.Struct("RVConnectionData").(NEX.RVConnectionData)
    OAnyData := stream.Struct("Data").(NEX.Data)
    rmcResult, returnValue,PidPrincipal,PConnectionData,StrReturnMsg := Simple_Authentication_LoginWithTokenEx(StrToken,PConnectionData,OAnyData)
    responseStream := NEX.NewOutputStream()
    responseStream.UInt32LE(uint32(returnValue))
    responseStream.UInt32LE(PidPrincipal)
    responseStream.Struct(PConnectionData)
    responseStream.String(string(StrReturnMsg))
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_AcquireNexUniqueId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, PNexUniqueId := Utility_AcquireNexUniqueId()
    responseStream := NEX.NewOutputStream()
    responseStream.UInt64LE(PNexUniqueId)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_AcquireNexUniqueIdWithPassword_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, PNexUniqueIdInfo := Utility_AcquireNexUniqueIdWithPassword()
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PNexUniqueIdInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_AssociateNexUniqueIdWithMyPrincipalId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UniqueIdInfo := stream.Struct("UniqueIdInfo").(NEX.UniqueIdInfo)
    rmcResult := Utility_AssociateNexUniqueIdWithMyPrincipalId(UniqueIdInfo)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_AssociateNexUniqueIdsWithMyPrincipalId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    UniqueIdInfo := stream.List("UniqueIdInfo", func (innerStream *NEX.InputStream) NEX.UniqueIdInfo { return innerStream.Struct("UniqueIdInfo").(NEX.UniqueIdInfo) }).([]NEX.UniqueIdInfo)
    rmcResult := Utility_AssociateNexUniqueIdsWithMyPrincipalId(UniqueIdInfo)
    responseStream := NEX.NewOutputStream()
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_GetAssociatedNexUniqueIdWithMyPrincipalId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, PUniqueIdInfo := Utility_GetAssociatedNexUniqueIdWithMyPrincipalId()
    responseStream := NEX.NewOutputStream()
    responseStream.Struct(PUniqueIdInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_GetAssociatedNexUniqueIdsWithMyPrincipalId_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    rmcResult, PUniqueIdInfo := Utility_GetAssociatedNexUniqueIdsWithMyPrincipalId()
    responseStream := NEX.NewOutputStream()
    responseStream.List(func (innerStream *NEX.OutputStream, data NEX.UniqueIdInfo) { innerStream.Struct(data) }, PUniqueIdInfo)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_GetIntegerSettings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    IntegerSettingIndex := stream.UInt32LE()
    rmcResult, IntegerSettings := Utility_GetIntegerSettings(IntegerSettingIndex)
    responseStream := NEX.NewOutputStream()
    responseStream.Map(func (innerStream *NEX.OutputStream, key uint16, value int32) { innerStream.UInt16LE(key); innerStream.Int32LE(value) }, IntegerSettings)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
func Utility_GetStringSettings_Wrapper(req NEX.RMCRequest) (ret NEX.RMCResponse) {
    stream := NEX.NewInputStream(req.Parameters)
    StringSettingIndex := stream.UInt32LE()
    rmcResult, StringSettings := Utility_GetStringSettings(StringSettingIndex)
    responseStream := NEX.NewOutputStream()
    responseStream.Map(func (innerStream *NEX.OutputStream, key uint16, value string) { innerStream.UInt16LE(key); innerStream.String(string(value)) }, StringSettings)
    ret = NEX.NewRMCResponse(int(req.ProtocolID & ^uint8(0x80)), req.CallID)
    if rmcResult == 0x00010001  {
    	ret.SetSuccess(req.MethodID, responseStream.Bytes())
    } else {
    	ret.SetError(rmcResult)
    }
    return
}
